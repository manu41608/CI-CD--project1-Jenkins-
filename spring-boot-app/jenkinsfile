pipeline {
    agent any
    stages {
        stage('check-out') {
            steps {
                echo 'cloning git repo'
                git branch: 'main', url: 'https://github.com/manu41608/CI-CD--project1-Jenkins-.git'
            }
        }
        stage('Build-Test') {
            steps {
                sh 'ls -ltr'
                 // build the project and create a JAR file
                sh 'cd spring-boot-app && sudo mvn clean package'
            }
        }
     stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
     stage('Build and push docker image') {
        environment {
          DOCKER_IMAGE = "manu41608/ci-cd-project1:${BUILD_NUMBER}"
          // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
          REGISTRY_CREDENTIALS = credentials('docker-cred')
       }
            steps {        
               script {
                    sh 'ls -ltr'
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    //docker.withRegistry('https://hub.docker.com/v2/', "docker-cred") {
                     //   dockerImage.push()
                   //}
                    sh 'sudo docker push ${DOCKER_IMAGE}'
              }
         }
       }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "CI-CD--project1-Jenkins-"
            GIT_USER_NAME = "manu41608"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "manohara41608@gmail.com"
                    git config user.name "manu41608"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
    }
 }
